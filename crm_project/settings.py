# """
# Django settings for crm_project project.

# Generated by 'django-admin startproject' using Django 5.2.4.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
# """

# from pathlib import Path
# from datetime import timedelta
# import os
# from dotenv import load_dotenv
# import redis 
# from celery.schedules import crontab
# import dj_database_url

# load_dotenv()


# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# # SECRET_KEY = "django-insecure-1l^2^t61u5q$x%7u-e0@hx#_b@*kw8ulk1v%e8t*y2s#$bwuj^"

# # # SECURITY WARNING: don't run with debug turned on in production!
# # DEBUG = True

# # ALLOWED_HOSTS = []

# SECRET_KEY = os.getenv("SECRET_KEY")
# DEBUG = False
# ALLOWED_HOSTS = ["*"]
# # ALLOWED_HOSTS = [os.environ.get("RENDER_EXTERNAL_HOSTNAME")]


# # Application definition

# INSTALLED_APPS = [
#     "django.contrib.admin",
#     "django.contrib.auth",
#     "django.contrib.contenttypes",
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "django.contrib.staticfiles",
#     "users",
#     "teams",
#     "leads",
#     "contacts",
#     "notifications",
#     "channels",
#     "rest_framework",
#     "rest_framework_simplejwt",
#     "rest_framework_simplejwt.token_blacklist",
#     "django_extensions",
#     "corsheaders",
# ]

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),

#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',  # restrict all views by default
#     ),

#     'DEFAULT_THROTTLE_CLASSES': [
#         'rest_framework.throttling.AnonRateThrottle',
#         'rest_framework.throttling.UserRateThrottle',
#     ],
#     'DEFAULT_THROTTLE_RATES': {
#         'anon': '5/minute',
#         'user': '100/minute',
#     }

# }

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#     'BLACKLIST_AFTER_ROTATION': True,
#     'ROTATE_REFRESH_TOKENS': True,
# }

# MIDDLEWARE = [
#     "django.middleware.security.SecurityMiddleware",
#     "whitenoise.middleware.WhiteNoiseMiddleware", 
#     "django.contrib.sessions.middleware.SessionMiddleware",
#     "django.middleware.common.CommonMiddleware",
#     "django.middleware.csrf.CsrfViewMiddleware",
#     "django.contrib.auth.middleware.AuthenticationMiddleware",
#     "django.contrib.messages.middleware.MessageMiddleware",
#     "django.middleware.clickjacking.XFrameOptionsMiddleware",
#     "corsheaders.middleware.CorsMiddleware",
#     "django.middleware.common.CommonMiddleware",
# ]

# ROOT_URLCONF = "crm_project.urls"

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [os.path.join(BASE_DIR, 'templates')], 
#         'APP_DIRS': True,
#         "OPTIONS": {
#             "context_processors": [
#                 "django.template.context_processors.request",
#                 "django.contrib.auth.context_processors.auth",
#                 "django.contrib.messages.context_processors.messages",
#                 'django.template.context_processors.csrf',  
#             ],
#         },
#     },
# ]

# # CORS_ALLOW_ALL_ORIGINS = True
# # CORS_ALLOWED_ORIGINS = [
# #     "http://localhost:3000",
# # ]

# CORS_ALLOWED_ORIGINS = [
#     # "https://your-crm-frontend.netlify.app"
#     "http://localhost:3000",
# ]
# CORS_ALLOW_ALL_ORIGINS = False



# WSGI_APPLICATION = "crm_project.wsgi.application"
# ASGI_APPLICATION = "crm_project.asgi.application"

# # Temporary in-memory layer (can use Redis later in prod)
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer",
#         # "CONFIG": {
#         #     "hosts": [("127.0.0.1", 6379)],  # Redis running locally
#         # },
#     }
# }


# # Database
# # https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# if os.environ.get("RENDER"):  # On Render
#     DATABASES = {
#         'default': dj_database_url.config(
#             default=os.environ.get("DATABASE_URL"),
#             conn_max_age=600,
#             conn_health_checks=True,
#         )
#     }
# else:  # Local development
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql',
#             'NAME': 'advanced_crm_db',
#             'USER': 'crm_user',
#             'PASSWORD': 'Anshika20',
#             'HOST': 'localhost',
#             'PORT': '5432',
#         }
#     }


# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = "en-us"

# TIME_ZONE = "UTC"

# USE_I18N = True

# USE_TZ = True


# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL = "static/"

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379/1")

# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": REDIS_URL,
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             # "PASSWORD": os.getenv("REDIS_PASSWORD", None),  # if we need auth
#         },
#     }
# }

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AUTH_USER_MODEL = "users.CustomUser"

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True

# EMAIL_HOST_USER = 'anshikacoder10@gmail.com'
# EMAIL_HOST_PASSWORD = os.getenv("PASS_KEY")
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# # CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis running locally on default port
# # CELERY_RESULT_BACKEND = 'redis://localhost:6379/0' # Store task result
# CELERY_BROKER_URL = os.getenv("REDIS_URL")
# CELERY_RESULT_BACKEND = os.getenv("REDIS_URL")
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Kolkata'  # our timezone

# CELERY_BEAT_SCHEDULE = {
#     'update-leads-count-every-three-minutes': {
#         'task': 'leads.tasks.update_leads_count',
#         'schedule': crontab(minute='*/3')
#     },

#     'update-users-count-every-three-minutes': {
#         'task': 'leads.tasks.update_users_count',
#         'schedule': crontab(minute='*/3')
#     },

#     'update-teams-count-every-three-minutes': {
#         'task': 'leads.tasks.update_teams_count',
#         'schedule': crontab(minute='*/3')
#     }
# }

# REDIS_HOST = 'localhost'
# REDIS_PORT = '6379'
# REDIS_DB = '0'

# REDIS_CLIENT = redis.Redis(
#     host=REDIS_HOST,
#     port=REDIS_PORT,
#     db=REDIS_DB
# )


"""
Django settings for crm_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import redis
from celery.schedules import crontab
import dj_database_url
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY
SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = False
ALLOWED_HOSTS = ["127.0.0.1", "localhost", "advanced-crm.onrender.com"]

# APPLICATIONS
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "users",
    "teams",
    "leads",
    "contacts",
    "notifications",
    "channels",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_extensions",
    "corsheaders",
]

# REST FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '5/minute',
        'user': '100/minute',
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'BLACKLIST_AFTER_ROTATION': True,
    'ROTATE_REFRESH_TOKENS': True,
}

# MIDDLEWARE
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # must be top
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware", 
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "crm_project.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], 
        'APP_DIRS': True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'django.template.context_processors.csrf',  
            ],
        },
    },
]

# CORS
CORS_ALLOWED_ORIGINS = [
    "https://acrm-frontend.netlify.app",
]

CORS_ALLOW_ALL_ORIGINS = False

WSGI_APPLICATION = "crm_project.wsgi.application"
ASGI_APPLICATION = "crm_project.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    }
}

# DATABASE
if os.environ.get("RENDER"):
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get("DATABASE_URL"),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'advanced_crm_db',
            'USER': 'crm_user',
            'PASSWORD': 'Anshika20',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

# PASSWORD VALIDATION
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# INTERNATIONALIZATION
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# STATIC & MEDIA
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# REDIS / CACHE
REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379/1")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}

# CELERY
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'

CELERY_BEAT_SCHEDULE = {
    'update-leads-count-every-three-minutes': {
        'task': 'leads.tasks.update_leads_count',
        'schedule': crontab(minute='*/3')
    },
    'update-users-count-every-three-minutes': {
        'task': 'leads.tasks.update_users_count',
        'schedule': crontab(minute='*/3')
    },
    'update-teams-count-every-three-minutes': {
        'task': 'leads.tasks.update_teams_count',
        'schedule': crontab(minute='*/3')
    }
}

# AUTH
AUTH_USER_MODEL = "users.CustomUser"

# EMAIL
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'anshikacoder10@gmail.com'
EMAIL_HOST_PASSWORD = os.getenv("PASS_KEY")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
